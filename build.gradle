plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url "https://maven.ladysnake.org/releases"
	}
	maven {
		url "https://maven.terraformersmc.com/releases/"
	}
	maven {
		url "https://maven.siphalor.de/"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"locks" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	minecraft "com.mojang:minecraft:$minecraft_version"
	mappings "net.fabricmc:yarn:$yarn_mappings:v2"
	modImplementation "net.fabricmc:fabric-loader:$loader_version"

	modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:$cardinal_components_version")
	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:$cardinal_components_version")
	include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:$cardinal_components_version")

	include modApi(platform("de.siphalor.tweed4:tweed4-bom-$tweed_minecraft_version:$tweed_version"))
	include modApi("de.siphalor.tweed4:tweed4-base-$tweed_minecraft_version")
	include modApi("de.siphalor.tweed4:tweed4-annotated-$tweed_minecraft_version")
	//include modApi("de.siphalor.tweed4:tweed4-data-$tweed_minecraft_version")
	include modApi("de.siphalor.tweed4:tweed4-data-gson-$tweed_minecraft_version")
	include modApi("de.siphalor.tweed4:tweed4-tailor-screen-$tweed_minecraft_version")
	include modApi("de.siphalor.tweed4:tweed4-tailor-coat-$tweed_minecraft_version")
	include modApi("de.siphalor:coat-$tweed_minecraft_version:$coat_version")

	modClientImplementation "com.terraformersmc:modmenu:$mod_menu_version"

	include implementation("io.reactivex.rxjava3:rxjava:$rxjava_version")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}